{
  "hash": "2e8b55443db18dcbc77926ec15dfcc13",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Nested DF\n---\n\n\n\n\nTo unnest a column containing nested pandas `Series` (or lists, dictionaries, or similar structures) into individual rows or columns, you can use various `pandas` methods. This operation is similar to R's `tidyr::unnest()` function.\n\nHereâ€™s how you can unnest `Series` in a pandas DataFrame:\n\n---\n\n## Unnesting DF contained `Series`\n\n::: {#c42135a6 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\n# Sample DataFrame with nested Series\ndata = {\n    \"id\": [1, 2, 3],\n    \"nested_series\": [pd.Series([10, 20, 30]), pd.Series([40, 50]), pd.Series([60])]\n}\n\ndf = pd.DataFrame(data)\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>nested_series</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0    10\n1    20\n2    30\ndtype: int64</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>0    40\n1    50\ndtype: int64</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>0    60\ndtype: int64</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Unnest into Rows\n\nTo unnest the `nested_series` column into rows, use `explode()`. It expands each nested structure into separate rows.\n\n::: {#c135a2fa .cell execution_count=2}\n``` {.python .cell-code}\n# Unnest the nested_series into separate rows\ndf_unnested = df.explode('nested_series').reset_index(drop=True)\ndf_unnested\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>nested_series</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>50</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>3</td>\n      <td>60</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n**Explanation:**\n\n- `explode()` splits the `Series` in the `nested_series` column into individual rows.\n- `reset_index()` is used to reindex the resulting DataFrame for cleaner output.\n\n---\n\n### Unnest into Columns\n\nIf you want to unnest the `Series` into multiple columns, convert them into a `DataFrame` using `pd.concat` or `.apply(pd.Series)`.\n\n::: {#a2f5d2f9 .cell execution_count=3}\n``` {.python .cell-code}\n# Unnest the nested_series into separate columns\ndf_unnested_cols = pd.concat(\n    [df.drop(columns='nested_series'), df['nested_series'].apply(pd.Series)], axis=1\n    )\ndf_unnested_cols\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>10.0</td>\n      <td>20.0</td>\n      <td>30.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>40.0</td>\n      <td>50.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>60.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n**Explanation:**\n\n- `df['nested_series'].apply(pd.Series)` converts the `Series` in the column into a `DataFrame` with one column per value.\n- `pd.concat()` merges this with the rest of the original DataFrame.\n\n---\n\n### Unnest into a Long Format\n\nYou can unnest into a long format with identifiers using `explode()` and create an additional identifier column.\n\n::: {#2c3ac7f3 .cell execution_count=4}\n``` {.python .cell-code}\n# Add an identifier column for position in nested Series\ndf_long = df.explode('nested_series').reset_index(drop=True)\ndf_long['position'] = df_long.groupby('id').cumcount() + 1\n\ndf_long\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>nested_series</th>\n      <th>position</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>10</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>20</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>30</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>40</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>50</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>3</td>\n      <td>60</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n**Explanation:**\n\n- `explode()` unnests the `Series` into rows.\n- `groupby('id').cumcount()` adds a position identifier for the unnesting, mimicking the long format with row-wise detail.\n\n---\n\n### Summary of Methods:\n\n| **Goal**                    | **Method**                                             | **Example**                              |\n|-----------------------------|-------------------------------------------------------|------------------------------------------|\n| Unnest into rows            | `explode()`                                           | `df.explode('column')`                   |\n| Unnest into columns         | `apply(pd.Series)` + `pd.concat()`                    | `pd.concat([...], axis=1)`               |\n| Unnest into long format     | `explode()` + `groupby().cumcount()`                  | `df.explode('column').reset_index()`     |\n\nLet me know if you have more specific scenarios or need additional examples!\n\n",
    "supporting": [
      "pd-nested_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}
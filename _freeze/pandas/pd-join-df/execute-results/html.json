{
  "hash": "e3796656b3a28da5433baab82f629a29",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Joining DataFrames\n---\n\n::: {#bcc9671e .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n```\n:::\n\n\n## Mutating Joins\n\nTo perform mutating joins in `pandas` similar to `{dplyr}` joins in R, you can use the `.merge()` method and specify the appropriate `how` parameter. Below is a guide to achieve the `inner_join`, `left_join`, and `full_join` functionality in pandas.\n\n::: {#760c0c32 .cell execution_count=2}\n``` {.python .cell-code}\n# DataFrame x (left table)\nx = pd.DataFrame({\n    'key': [1, 2, 3],\n    'value_x': ['a', 'b', 'c']\n})\n\n# DataFrame y (right table)\ny = pd.DataFrame({\n    'key': [2, 3, 4],\n    'value_y': ['d', 'e', 'f']\n})\n```\n:::\n\n\n::: {#e38fe486 .cell execution_count=3}\n``` {.python .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>value_x</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>b</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>c</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#e9439fb2 .cell execution_count=4}\n``` {.python .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>value_y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>d</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>e</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4</td>\n      <td>f</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### `inner_join()`\n\n- **Description**: Includes only rows where the `key` matches in both `x` and `y`.\n\n::: {#ad253c7b .cell execution_count=5}\n``` {.python .cell-code}\n# Perform an inner join\ninner_join = pd.merge(x, y, on='key', how='inner')\ninner_join\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>value_x</th>\n      <th>value_y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>b</td>\n      <td>d</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>c</td>\n      <td>e</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n- `on='key'` specifies the column to join on.\n- `how='inner'` keeps only rows with matching keys in both DataFrames.\n\n\n### `left_join()`\n\n- **Description**: Includes all rows from `x`, regardless of whether there is a matching row in `y`.\n\n::: {#cdac1f01 .cell execution_count=6}\n``` {.python .cell-code}\n# Perform a left join\nleft_join = pd.merge(x, y, on='key', how='left')\nleft_join\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>value_x</th>\n      <th>value_y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>a</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>b</td>\n      <td>d</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>c</td>\n      <td>e</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n- `how='left'` ensures all rows from `x` are retained.\n- Rows in `x` with no match in `y` have `NaN` values for columns from `y`.\n\n\n### `full_join()`\n\n- **Description**: Includes all rows from both `x` and `y`. Rows with no match in either DataFrame are filled with `NaN`.\n\n::: {#1b0ae5cf .cell execution_count=7}\n``` {.python .cell-code}\n# Perform a full join\nfull_join = pd.merge(x, y, on='key', how='outer')\nfull_join\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>value_x</th>\n      <th>value_y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>a</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>b</td>\n      <td>d</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>c</td>\n      <td>e</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>NaN</td>\n      <td>f</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n- `how='outer'` includes all rows from both `x` and `y`.\n- Rows with no match are filled with `NaN`.\n\n\n### Summary of `pandas.merge()` `how` Parameter:\n\n| **Join Type**     | **`how` Parameter** | **Description**                                                                |\n|--------------------|---------------------|--------------------------------------------------------------------------------|\n| `inner_join()`     | `'inner'`          | Keeps only rows with keys in both `x` and `y`.                                 |\n| `left_join()`      | `'left'`           | Keeps all rows from `x` and adds matching rows from `y` (or `NaN` if no match).|\n| `full_join()`      | `'outer'`          | Keeps all rows from both `x` and `y`, filling unmatched rows with `NaN`.       |\n\n---\n\n### Joining on Columns with Different Names\n\nIf the key column names differ between `x` and `y`, use the `left_on` and `right_on` parameters.\n\n::: {#9e741424 .cell execution_count=8}\n``` {.python .cell-code}\n# DataFrames with different key column names\nx = pd.DataFrame({'id_x': [1, 2, 3], 'value_x': ['a', 'b', 'c']})\ny = pd.DataFrame({'id_y': [2, 3, 4], 'value_y': ['d', 'e', 'f']})\n\n# Perform an inner join with different key column names\ninner_join = pd.merge(x, y, left_on='id_x', right_on='id_y', how='inner')\ninner_join\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id_x</th>\n      <th>value_x</th>\n      <th>id_y</th>\n      <th>value_y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>b</td>\n      <td>2</td>\n      <td>d</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>c</td>\n      <td>3</td>\n      <td>e</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Joining on Multiple Columns\n\n#### Same Names\n\n::: {#5c7f549c .cell execution_count=9}\n``` {.python .cell-code}\nimport pandas as pd\n\n# DataFrame x\nx = pd.DataFrame({\n    'key1': ['A', 'B', 'C', 'A'],\n    'key2': [1, 2, 3, 4],\n    'value_x': ['apple', 'banana', 'cherry', 'date']\n})\nx\n\n# DataFrame y\ny = pd.DataFrame({\n    'key1': ['A', 'B', 'A', 'D'],\n    'key2': [1, 2, 4, 5],\n    'value_y': ['red', 'yellow', 'green', 'blue']\n})\ny\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key1</th>\n      <th>key2</th>\n      <th>value_y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A</td>\n      <td>1</td>\n      <td>red</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>B</td>\n      <td>2</td>\n      <td>yellow</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A</td>\n      <td>4</td>\n      <td>green</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>D</td>\n      <td>5</td>\n      <td>blue</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#0ff83cfe .cell execution_count=10}\n``` {.python .cell-code}\n# Inner join on key1 and key2\ninner_join = pd.merge(x, y, on=['key1', 'key2'], how='inner')\ninner_join\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key1</th>\n      <th>key2</th>\n      <th>value_x</th>\n      <th>value_y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A</td>\n      <td>1</td>\n      <td>apple</td>\n      <td>red</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>B</td>\n      <td>2</td>\n      <td>banana</td>\n      <td>yellow</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A</td>\n      <td>4</td>\n      <td>date</td>\n      <td>green</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Different Names\n\n::: {#fa4b8c68 .cell execution_count=11}\n``` {.python .cell-code}\n# DataFrames with different column names for keys\nx = pd.DataFrame({'key1_x': ['A', 'B', 'C'], 'key2_x': [1, 2, 3], 'value_x': ['apple', 'banana', 'cherry']})\ny = pd.DataFrame({'key1_y': ['A', 'B', 'A'], 'key2_y': [1, 2, 4], 'value_y': ['red', 'yellow', 'green']})\n\n# Merge on different column names\nmerged = pd.merge(x, y, left_on=['key1_x', 'key2_x'], right_on=['key1_y', 'key2_y'], how='inner')\nmerged\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key1_x</th>\n      <th>key2_x</th>\n      <th>value_x</th>\n      <th>key1_y</th>\n      <th>key2_y</th>\n      <th>value_y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A</td>\n      <td>1</td>\n      <td>apple</td>\n      <td>A</td>\n      <td>1</td>\n      <td>red</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>B</td>\n      <td>2</td>\n      <td>banana</td>\n      <td>B</td>\n      <td>2</td>\n      <td>yellow</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Filtering Joins\n\nIn `pandas`, filtering joins like `semi_join()` and `anti_join()` can be implemented using methods such as `.merge()`, boolean indexing, and `pandas` operations like `.isin()`. Below is how to achieve the functionality of `{dplyr}` filtering joins in pandas.\n\n::: {#d9201259 .cell execution_count=12}\n``` {.python .cell-code}\nimport pandas as pd\n\n# DataFrame x (left table)\nx = pd.DataFrame({\n    'key': [1, 2, 3, 4],\n    'value_x': ['a', 'b', 'c', 'd']\n})\n\n# DataFrame y (right table)\ny = pd.DataFrame({\n    'key': [2, 3, 5],\n    'value_y': ['e', 'f', 'g']\n})\n```\n:::\n\n\n::: {#3f4fffa0 .cell execution_count=13}\n``` {.python .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>value_x</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>b</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>c</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>d</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#484a80e1 .cell execution_count=14}\n``` {.python .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>value_y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>e</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>f</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5</td>\n      <td>g</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### `semi_join()`\n\n- **Description**: Keeps all rows in `x` where there is a matching `key` in `y`. The result only includes columns from `x`.\n\nYou can use `.isin()` to filter rows in `x` where the `key` exists in `y`.\n\n::: {#a04e2acd .cell execution_count=15}\n``` {.python .cell-code}\n# Semi-join: Keep rows in x that have a match in y\nsemi_join = x[x['key'].isin(y['key'])]\nsemi_join\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>value_x</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>b</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>c</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n- `y['key']` provides the keys in `y`.\n- `x['key'].isin(y['key'])` creates a boolean mask for rows in `x` where `key` exists in `y`.\n\n\n### `anti_join()`\n\n- **Description**: Keeps all rows in `x` where there is **no matching `key`** in `y`. The result only includes columns from `x`.\n\n\nYou can use `.isin()` with the `~` operator (logical NOT) to filter rows in `x` where the `key` does **not** exist in `y`.\n\n::: {#f098319c .cell execution_count=16}\n``` {.python .cell-code}\n# Anti-join: Drop rows in x that have a match in y\nanti_join = x[~x['key'].isin(y['key'])]\nanti_join\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>value_x</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>d</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n- `~x['key'].isin(y['key'])` creates a boolean mask for rows in `x` where `key` is **not** in `y`.\n\n\n### Summary of Filtering Joins\n\n| **Join Type**   | **Description**                                             | **Implementation**                     |\n|------------------|-------------------------------------------------------------|-----------------------------------------|\n| `semi_join(x, y)` | Keeps rows in `x` where there is a match in `y`.            | `x[x['key'].isin(y['key'])]`            |\n| `anti_join(x, y)` | Keeps rows in `x` where there is no match in `y`.           | `x[~x['key'].isin(y['key'])]`           |\n\n---\n\n#### Example of Combined Filtering Joins\n\nIf you want to perform both filtering joins and combine their outputs for analysis, you can do so in pandas:\n\n::: {#d78ba75f .cell execution_count=17}\n``` {.python .cell-code}\n# Semi-join: Rows in x with a match in y\nsemi_join = x[x['key'].isin(y['key'])]\nsemi_join\n# Anti-join: Rows in x without a match in y\nanti_join = x[~x['key'].isin(y['key'])]\nanti_join\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>value_x</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>d</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "pd-join-df_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}
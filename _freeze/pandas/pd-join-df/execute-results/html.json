{
  "hash": "404fbf2133cecd2d401077984f05dac7",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Joining DataFrames\n---\n\n::: {#27668073 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n```\n:::\n\n\n## Mutating Joins in `pandas`\n\nTo perform mutating joins in `pandas` similar to `{dplyr}` joins in R, you can use the `.merge()` method and specify the appropriate `how` parameter. Below is a guide to achieve the `inner_join`, `left_join`, and `full_join` functionality in pandas.\n\n::: {#d100fe1c .cell execution_count=2}\n``` {.python .cell-code}\n# DataFrame x (left table)\nx = pd.DataFrame({\n    'key': [1, 2, 3],\n    'value_x': ['a', 'b', 'c']\n})\n\n# DataFrame y (right table)\ny = pd.DataFrame({\n    'key': [2, 3, 4],\n    'value_y': ['d', 'e', 'f']\n})\n```\n:::\n\n\n::: {#0c64ffc3 .cell execution_count=3}\n``` {.python .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>value_x</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>b</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>c</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#8ef0e88d .cell execution_count=4}\n``` {.python .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>value_y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>d</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>e</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4</td>\n      <td>f</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### `inner_join()`\n\n- **Description**: Includes only rows where the `key` matches in both `x` and `y`.\n\n::: {#9757c1ff .cell execution_count=5}\n``` {.python .cell-code}\n# Perform an inner join\ninner_join = pd.merge(x, y, on='key', how='inner')\ninner_join\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>value_x</th>\n      <th>value_y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>b</td>\n      <td>d</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>c</td>\n      <td>e</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n- `on='key'` specifies the column to join on.\n- `how='inner'` keeps only rows with matching keys in both DataFrames.\n\n\n### `left_join()`\n\n- **Description**: Includes all rows from `x`, regardless of whether there is a matching row in `y`.\n\n::: {#e1bcc78f .cell execution_count=6}\n``` {.python .cell-code}\n# Perform a left join\nleft_join = pd.merge(x, y, on='key', how='left')\nleft_join\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>value_x</th>\n      <th>value_y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>a</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>b</td>\n      <td>d</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>c</td>\n      <td>e</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n- `how='left'` ensures all rows from `x` are retained.\n- Rows in `x` with no match in `y` have `NaN` values for columns from `y`.\n\n\n### `full_join()`\n\n- **Description**: Includes all rows from both `x` and `y`. Rows with no match in either DataFrame are filled with `NaN`.\n\n::: {#4123f5cc .cell execution_count=7}\n``` {.python .cell-code}\n# Perform a full join\nfull_join = pd.merge(x, y, on='key', how='outer')\nfull_join\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>value_x</th>\n      <th>value_y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>a</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>b</td>\n      <td>d</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>c</td>\n      <td>e</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>NaN</td>\n      <td>f</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n- `how='outer'` includes all rows from both `x` and `y`.\n- Rows with no match are filled with `NaN`.\n\n\n### Summary of `pandas.merge()` `how` Parameter:\n\n| **Join Type**     | **`how` Parameter** | **Description**                                                                |\n|--------------------|---------------------|--------------------------------------------------------------------------------|\n| `inner_join()`     | `'inner'`          | Keeps only rows with keys in both `x` and `y`.                                 |\n| `left_join()`      | `'left'`           | Keeps all rows from `x` and adds matching rows from `y` (or `NaN` if no match).|\n| `full_join()`      | `'outer'`          | Keeps all rows from both `x` and `y`, filling unmatched rows with `NaN`.       |\n\n---\n\n### Joining on Columns with Different Names\n\nIf the key column names differ between `x` and `y`, use the `left_on` and `right_on` parameters.\n\n::: {#2859df61 .cell execution_count=8}\n``` {.python .cell-code}\n# DataFrames with different key column names\nx = pd.DataFrame({'id_x': [1, 2, 3], 'value_x': ['a', 'b', 'c']})\ny = pd.DataFrame({'id_y': [2, 3, 4], 'value_y': ['d', 'e', 'f']})\n\n# Perform an inner join with different key column names\ninner_join = pd.merge(x, y, left_on='id_x', right_on='id_y', how='inner')\ninner_join\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id_x</th>\n      <th>value_x</th>\n      <th>id_y</th>\n      <th>value_y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>b</td>\n      <td>2</td>\n      <td>d</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>c</td>\n      <td>3</td>\n      <td>e</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "pd-join-df_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}
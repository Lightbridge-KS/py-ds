{
  "hash": "852854d10e374b351de9e9c8d2d03125",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Data Encryption\"\n---\n\n\n\n\n::: {.callout-note appearance=\"simple\"}\n**Prompt:** If I have a sensitive data, such as Hospital Number (HN), how to encrypt it in some text string and able to retrieve back as needed with permission?\n:::\n\n\nTo securely encrypt and decrypt sensitive data like a Hospital Number (HN), you can use **symmetric encryption** with a strong encryption algorithm, such as **AES (Advanced Encryption Standard)**. Symmetric encryption uses the same key for both encryption and decryption, so you'll need to ensure that the key is securely managed and only accessible with the proper permissions.\n\n\nHereâ€™s a step-by-step guide to encrypt and decrypt sensitive data like a Hospital Number (HN):\n\n## Example Code:\n\n### Step 1: Generate a key \n\n(Do this once and store the key securely, like in an environment variable)\n\n::: {#09124bb9 .cell execution_count=1}\n``` {.python .cell-code}\nfrom cryptography.fernet import Fernet\n\n# Step 1: Generate a key (Do this once and store the key securely, like in an environment variable)\n# Key generation\nkey = Fernet.generate_key()\ncipher_suite = Fernet(key)\n\nprint(f\"key = {key}\")\nprint(f\"Encryption Key: {key.decode()}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nkey = b'spKxRxkEA7yNMBYlQ64Xr_4rhO14zcxO1ct_rp6Wd4U='\nEncryption Key: spKxRxkEA7yNMBYlQ64Xr_4rhO14zcxO1ct_rp6Wd4U=\n```\n:::\n:::\n\n\n### Step 2: Encrypt the Hospital Number (HN)\n\n::: {#ef694c6d .cell execution_count=2}\n``` {.python .cell-code}\ndef encrypt_hn(hospital_number: str, cipher_suite: Fernet) -> str:\n    encrypted_data = cipher_suite.encrypt(hospital_number.encode())\n    return encrypted_data.decode()\n```\n:::\n\n\n### Step 3: Decrypt the encrypted HN\n\n::: {#3b848417 .cell execution_count=3}\n``` {.python .cell-code}\ndef decrypt_hn(encrypted_hn: str, cipher_suite: Fernet) -> str:\n    decrypted_data = cipher_suite.decrypt(encrypted_hn.encode())\n    return decrypted_data.decode()\n```\n:::\n\n\n### Example Usage\n\n::: {#3771c392 .cell execution_count=4}\n``` {.python .cell-code}\nhospital_number = \"123456\"\n\n# Encrypt the HN\nencrypted_hn = encrypt_hn(hospital_number, cipher_suite)\nprint(f\"Encrypted Hospital Number: {encrypted_hn}\")\n\n# Decrypt the HN (with the correct key)\ndecrypted_hn = decrypt_hn(encrypted_hn, cipher_suite)\nprint(f\"Decrypted Hospital Number: {decrypted_hn}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEncrypted Hospital Number: gAAAAABm6acDyFNejwXCCX4ikMOT-IdCTlKfPOww6t0cyPb03UAtpuEH2Um3duDWYd2JKSwlfg86yFIaHmXAof5NQiiGSLHQGw==\nDecrypted Hospital Number: 123456\n```\n:::\n:::\n\n\n### How It Works:\n\n1. **Key Generation**:\n   \n   - The `Fernet.generate_key()` function generates a random key that is used to encrypt and decrypt the data. **This key must be securely stored** because it is required for decryption.\n   \n   You should store this key in a **secure location** like an environment variable, a hardware security module (HSM), or a secure vault.\n\n2. **Encryption**:\n   \n   - The `encrypt_hn()` function takes the hospital number, encodes it as bytes, and uses the `Fernet` cipher suite to encrypt it.\n   - The encrypted data is returned as a base64-encoded string.\n\n3. **Decryption**:\n   \n   - The `decrypt_hn()` function takes the encrypted string, decodes it, and decrypts it using the same `Fernet` cipher suite and key.\n\n### Important Considerations:\n\n- **Key Security**: The encryption key is crucial to the security of the data. Ensure that the key is stored in a secure location, like an environment variable or a secure secrets manager (e.g., AWS Secrets Manager, Azure Key Vault).\n- **Permission Control**: Only authorized users or processes should have access to the encryption key. You can implement role-based access control (RBAC) to restrict key access to authorized personnel.\n- **Key Rotation**: It's a good security practice to rotate encryption keys periodically. Make sure to securely rotate the key and re-encrypt the data as needed.\n- **Environment Variables**: In production, avoid hardcoding the key in the code. Instead, load it from an environment variable:\n  \n```python\nimport os\nkey = os.getenv('ENCRYPTION_KEY').encode()\ncipher_suite = Fernet(key)\n```\n\n### Storing the Key Securely:\n\n- **Local Development**: Use environment variables (`os.getenv()`).\n- **Production**: Use a secrets manager (AWS Secrets Manager, Google Secret Manager, Azure Key Vault, etc.).\n\n### Summary:\n\n- **Encrypt** sensitive data like a hospital number using a symmetric encryption algorithm (AES via the `Fernet` cipher).\n- **Store the key securely** and ensure only authorized entities can access it.\n- **Decrypt** the data when necessary with the proper permissions and access control.\n\n",
    "supporting": [
      "encryp_files"
    ],
    "filters": [],
    "includes": {}
  }
}
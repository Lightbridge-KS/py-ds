---
title: Joining DataFrames
---

```{python}
import pandas as pd
```

## Mutating Joins

To perform mutating joins in `pandas` similar to `{dplyr}` joins in R, you can use the `.merge()` method and specify the appropriate `how` parameter. Below is a guide to achieve the `inner_join`, `left_join`, and `full_join` functionality in pandas.


```{python}
# DataFrame x (left table)
x = pd.DataFrame({
    'key': [1, 2, 3],
    'value_x': ['a', 'b', 'c']
})

# DataFrame y (right table)
y = pd.DataFrame({
    'key': [2, 3, 4],
    'value_y': ['d', 'e', 'f']
})
```

```{python}
x
```

```{python}
y
```


### `inner_join()`

- **Description**: Includes only rows where the `key` matches in both `x` and `y`.

```{python}
# Perform an inner join
inner_join = pd.merge(x, y, on='key', how='inner')
inner_join
```

- `on='key'` specifies the column to join on.
- `how='inner'` keeps only rows with matching keys in both DataFrames.


### `left_join()`

- **Description**: Includes all rows from `x`, regardless of whether there is a matching row in `y`.

```{python}
# Perform a left join
left_join = pd.merge(x, y, on='key', how='left')
left_join
```

- `how='left'` ensures all rows from `x` are retained.
- Rows in `x` with no match in `y` have `NaN` values for columns from `y`.


### `full_join()`

- **Description**: Includes all rows from both `x` and `y`. Rows with no match in either DataFrame are filled with `NaN`.

```{python}
# Perform a full join
full_join = pd.merge(x, y, on='key', how='outer')
full_join
```


- `how='outer'` includes all rows from both `x` and `y`.
- Rows with no match are filled with `NaN`.


### Summary of `pandas.merge()` `how` Parameter:

| **Join Type**     | **`how` Parameter** | **Description**                                                                |
|--------------------|---------------------|--------------------------------------------------------------------------------|
| `inner_join()`     | `'inner'`          | Keeps only rows with keys in both `x` and `y`.                                 |
| `left_join()`      | `'left'`           | Keeps all rows from `x` and adds matching rows from `y` (or `NaN` if no match).|
| `full_join()`      | `'outer'`          | Keeps all rows from both `x` and `y`, filling unmatched rows with `NaN`.       |

---

### Joining on Columns with Different Names

If the key column names differ between `x` and `y`, use the `left_on` and `right_on` parameters.


```{python}
# DataFrames with different key column names
x = pd.DataFrame({'id_x': [1, 2, 3], 'value_x': ['a', 'b', 'c']})
y = pd.DataFrame({'id_y': [2, 3, 4], 'value_y': ['d', 'e', 'f']})

# Perform an inner join with different key column names
inner_join = pd.merge(x, y, left_on='id_x', right_on='id_y', how='inner')
inner_join
```


### Joining on Multiple Columns

#### Same Names

```{python}
import pandas as pd

# DataFrame x
x = pd.DataFrame({
    'key1': ['A', 'B', 'C', 'A'],
    'key2': [1, 2, 3, 4],
    'value_x': ['apple', 'banana', 'cherry', 'date']
})
x

# DataFrame y
y = pd.DataFrame({
    'key1': ['A', 'B', 'A', 'D'],
    'key2': [1, 2, 4, 5],
    'value_y': ['red', 'yellow', 'green', 'blue']
})
y
```

```{python}
# Inner join on key1 and key2
inner_join = pd.merge(x, y, on=['key1', 'key2'], how='inner')
inner_join
```

#### Different Names

```{python}
# DataFrames with different column names for keys
x = pd.DataFrame({'key1_x': ['A', 'B', 'C'], 'key2_x': [1, 2, 3], 'value_x': ['apple', 'banana', 'cherry']})
y = pd.DataFrame({'key1_y': ['A', 'B', 'A'], 'key2_y': [1, 2, 4], 'value_y': ['red', 'yellow', 'green']})

# Merge on different column names
merged = pd.merge(x, y, left_on=['key1_x', 'key2_x'], right_on=['key1_y', 'key2_y'], how='inner')
merged
```


## Filtering Joins

In `pandas`, filtering joins like `semi_join()` and `anti_join()` can be implemented using methods such as `.merge()`, boolean indexing, and `pandas` operations like `.isin()`. Below is how to achieve the functionality of `{dplyr}` filtering joins in pandas.


```{python}
import pandas as pd

# DataFrame x (left table)
x = pd.DataFrame({
    'key': [1, 2, 3, 4],
    'value_x': ['a', 'b', 'c', 'd']
})

# DataFrame y (right table)
y = pd.DataFrame({
    'key': [2, 3, 5],
    'value_y': ['e', 'f', 'g']
})
```

```{python}
x
```

```{python}
y
```


### `semi_join()`

- **Description**: Keeps all rows in `x` where there is a matching `key` in `y`. The result only includes columns from `x`.

You can use `.isin()` to filter rows in `x` where the `key` exists in `y`.

```{python}
# Semi-join: Keep rows in x that have a match in y
semi_join = x[x['key'].isin(y['key'])]
semi_join
```


- `y['key']` provides the keys in `y`.
- `x['key'].isin(y['key'])` creates a boolean mask for rows in `x` where `key` exists in `y`.


### `anti_join()`

- **Description**: Keeps all rows in `x` where there is **no matching `key`** in `y`. The result only includes columns from `x`.


You can use `.isin()` with the `~` operator (logical NOT) to filter rows in `x` where the `key` does **not** exist in `y`.

```{python}
# Anti-join: Drop rows in x that have a match in y
anti_join = x[~x['key'].isin(y['key'])]
anti_join
```

- `~x['key'].isin(y['key'])` creates a boolean mask for rows in `x` where `key` is **not** in `y`.


### Summary of Filtering Joins

| **Join Type**   | **Description**                                             | **Implementation**                     |
|------------------|-------------------------------------------------------------|-----------------------------------------|
| `semi_join(x, y)` | Keeps rows in `x` where there is a match in `y`.            | `x[x['key'].isin(y['key'])]`            |
| `anti_join(x, y)` | Keeps rows in `x` where there is no match in `y`.           | `x[~x['key'].isin(y['key'])]`           |

---

#### Example of Combined Filtering Joins

If you want to perform both filtering joins and combine their outputs for analysis, you can do so in pandas:

```{python}
# Semi-join: Rows in x with a match in y
semi_join = x[x['key'].isin(y['key'])]
semi_join
# Anti-join: Rows in x without a match in y
anti_join = x[~x['key'].isin(y['key'])]
anti_join
```
